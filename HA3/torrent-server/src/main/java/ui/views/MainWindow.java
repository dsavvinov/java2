/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.views;

import core.client.*;
import core.p2p.PeerServer;
import core.p2p.PeerService;
import core.p2p.PeerServiceNIOBased;
import database.DatabaseProvider;
import io.ObservableLogger;
import net.protocols.ClientServerProtocol;
import net.protocols.Peer2PeerProtocol;
import net.queries.responses.ListResponse;
import net.queries.responses.UploadResponse;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Objects;
import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.ExecutionException;

import static utils.Constants.CLIENT_DEFAULT_DB_NAME;

/**
 *
 * @author dsavvinov
 */
public class MainWindow extends javax.swing.JFrame implements Observer {
    private static final ObservableLogger log = new ObservableLogger();
    private static ServerService serverService;
    private static PeerService peerService;
    private static Updater updater;
    private static PeerServer peerServer;
    private static SequentialDownloader downloader;

    @Override
    public void update(Observable o, Object arg) {
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> update(o, arg));
            return;
        }

        if (o instanceof ObservableLogger) {
            logTextArea.append(arg + "\n");
            logTextArea.repaint();
            logTextArea.invalidate();
        } else if (o instanceof SequentialDownloader) {
            DefaultTableModel model = (DefaultTableModel) filesTable.getModel();
            Integer fileId = (Integer) ((Object[]) arg)[0];
            Double progress = (Double) ((Object[]) arg)[1];
            int rowCount = model.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                Integer id = (Integer) filesTable.getValueAt(i, 0);
                if (Objects.equals(id, fileId)) {
                    model.setValueAt(progress.intValue(), i, 3);
                    break;
                }
            }
        }
    }

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        uploadButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        listButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        filesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File ID", "File Name", "Size", "Downloaded"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        filesTable.setColumnSelectionAllowed(true);
        filesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(filesTable);
        filesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane2.setViewportView(logTextArea);

        jLabel1.setText("Log");

        listButton.setText("List");
        listButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 881, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(uploadButton)
                        .addGap(24, 24, 24)
                        .addComponent(downloadButton)
                        .addGap(33, 33, 33)
                        .addComponent(listButton)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {downloadButton, listButton, uploadButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uploadButton)
                            .addComponent(downloadButton)
                            .addComponent(listButton))
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        int status = fc.showOpenDialog(this);

        if (status == JFileChooser.APPROVE_OPTION) {
            Path path = fc.getSelectedFile().toPath();
            new SwingWorker<UploadResponse, Void>() {
                @Override
                protected UploadResponse doInBackground() throws Exception {
                    UploadResponse upload = serverService.upload(path);
                    serverService.update();
                    return upload;
                }

                @Override
                protected void done() {
                    try {
                        UploadResponse response = get();
                    } catch (InterruptedException | ExecutionException e) {
                        JOptionPane.showMessageDialog(null, "Error uploading file: " + e.getMessage());
                    }
                }
            }.execute();
        }
    }

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (filesTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Select file first!");
            return;
        }

        new SwingWorker<Void, Void>() {
            private String fileName;
            @Override
            protected Void doInBackground() throws Exception {
                int selectedRow = filesTable.getSelectedRow();

                Integer id = (Integer) filesTable.getValueAt(selectedRow, 0);
                fileName = (String) filesTable.getValueAt(selectedRow, 1);

                downloader.downloadFile(id);

                serverService.update();
                return null;
            }

            @Override
            protected void done() {
                try {
                    get();
                } catch (InterruptedException | ExecutionException e) {
                    log.error("Error downloading file: " + e.getMessage());
                    JOptionPane.showMessageDialog(null, "Error while downloading file <" + fileName + ">");
                    return;
                }
                JOptionPane.showMessageDialog(null, "File <" + fileName + "> was downloaded successfully!");


            }
        }.execute();
    }

    private void listButtonActionPerformed(java.awt.event.ActionEvent evt) {
        new SwingWorker<ListResponse, Void>() {
            @Override
            protected ListResponse doInBackground() throws Exception {
                return serverService.list();
            }

            @Override
            protected void done() {
                ListResponse listResponse = null;
                try {
                    listResponse = get();
                } catch (InterruptedException | ExecutionException ignored) {
                }

                if (listResponse == null) {
                    JOptionPane.showMessageDialog(null, "Error getting list of files");
                    return;
                }

                DefaultTableModel model = (DefaultTableModel) filesTable.getModel();
                model.setNumRows(0);

                for (int i = 0; i < listResponse.size(); i++) {
                    ListResponse.ListResponseItem item = listResponse.get(i);
                    model.addRow(new Object[]{item.id, item.name, (double) item.size / 1024.0} );
                }
            }
        }.execute();
    }

    public static void main(String args[]) {
        if (args.length < 1) {
            log.error("Error: client port should be provided");
            return;
        }

        short clientPort;
        try {
            clientPort = Short.parseShort(args[0]);
        } catch (NumberFormatException e) {
            log.error("Error: can't parse client port");
            return;
        }

        String dbName = CLIENT_DEFAULT_DB_NAME;
        // Check if non-default db-name was specified
        if (args.length == 2) {
            dbName = args[1];
        }

        String rootDir = System.getProperty("user.dir");

        // Init variables
        serverService = new ServerServiceNIOBased(clientPort, new ClientServerProtocol(), DatabaseProvider.getClientDB(dbName), log);
        peerService = new PeerServiceNIOBased(rootDir, new Peer2PeerProtocol(), log);
        updater = new Updater(log, clientPort, new ClientServerProtocol(), DatabaseProvider.getClientDB(dbName));
        peerServer = new PeerServer(clientPort, rootDir, log, DatabaseProvider.getClientDB(dbName));
        downloader = new SequentialDownloader(log, DatabaseProvider.getClientDB(dbName), serverService, peerService, rootDir);

        // Start services
        log.trace("Starting updater-thread");
        updater.start();

        log.trace("Starting peer-server");
        try {
            peerServer.start();
        } catch (IOException e) {
            log.error("Error creating peer-server: " + e.getMessage());
        }

        MainWindow mainWindow = new MainWindow();
        log.addObserver(mainWindow);
        downloader.addObserver(mainWindow);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> mainWindow.setVisible(true));
    }

    // Variables declaration - do not modify
    private javax.swing.JButton downloadButton;
    private javax.swing.JTable filesTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listButton;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton uploadButton;
    // End of variables declaration
}

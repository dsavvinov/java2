/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.views;

import core.client.Client;
import io.ObservableLogger;
import net.queries.responses.ListResponse;
import net.queries.responses.SourcesResponse;
import net.queries.responses.StatResponse;
import net.queries.responses.UpdateResponse;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.ExecutionException;

/**
 *
 * @author dsavvinov
 */
public class MainWindow extends javax.swing.JFrame implements Observer {
    private static final ObservableLogger log = new ObservableLogger();
    private static Client client;

    // Id of file, which seeds presented in seedsTable
    private int browsedFileId = -1;

    // Creditentials of seed, whose parts presented in partsTable
    private String browsedPeerAddress = null;
    private short browsedPeerPort = -1;

    // Directory, from where torrent was launched. Here we will download all the files
    private final Path rootDir;

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof ObservableLogger) {
            if (!SwingUtilities.isEventDispatchThread()) {
                SwingUtilities.invokeLater(() -> update(o, arg));
                return;
            }

            logTextArea.append(arg + "\n");
            logTextArea.repaint();
            logTextArea.invalidate();
        }
    }

    /**
     * Creates new form MainWindow
     * @param rootDir
     */
    public MainWindow(Path rootDir) {
        this.rootDir = rootDir;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        uploadButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        getSeedsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        seedsTable = new javax.swing.JTable();
        seedsTableLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        partsTable = new javax.swing.JTable();
        getPartsButton = new javax.swing.JButton();
        downloadPartButton = new javax.swing.JButton();
        partsTableLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        logLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Send update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        getSeedsButton.setText("Get seeds");
        getSeedsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSeedsButtonActionPerformed(evt);
            }
        });

        filesTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "File Name", "File ID", "File Size KB"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.Integer.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        filesTable.setColumnSelectionAllowed(true);
        filesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(filesTable);
        filesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        seedsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Address", "Host"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                    true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });


        seedsTable.setColumnSelectionAllowed(true);
        seedsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(seedsTable);
        seedsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        seedsTableLabel.setText("Seeds of file");

        partsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Part ID"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                    false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        partsTable.setColumnSelectionAllowed(true);
        partsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(partsTable);
        partsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        getPartsButton.setText("Get parts");
        getPartsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPartsButtonActionPerformed(evt);
            }
        });

        downloadPartButton.setText("Download part");
        downloadPartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadPartButtonActionPerformed(evt);
            }
        });

        partsTableLabel.setText("Parts, owned by seed:");

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane4.setViewportView(logTextArea);

        logLabel.setText("Log");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(getSeedsButton)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(uploadButton)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(refreshButton)
                                                        .addGap(78, 78, 78)
                                                        .addComponent(updateButton))
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(getPartsButton)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(seedsTableLabel)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(downloadPartButton)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(partsTableLabel)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(logLabel))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {refreshButton, updateButton, uploadButton});

        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(uploadButton)
                                        .addComponent(refreshButton)
                                        .addComponent(updateButton))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(seedsTableLabel)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(partsTableLabel)
                                                                .addComponent(logLabel))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(jScrollPane4)
                                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(downloadPartButton))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(getSeedsButton)
                                                                .addComponent(getPartsButton)))))
                                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        int status = fc.showOpenDialog(this);

        if (status == JFileChooser.APPROVE_OPTION) {
            Path path = fc.getSelectedFile().toPath();
            Path fileOnly = path.getFileName();
            client.executeUploadCommand(path.toString());
        }
    }

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
        new SwingWorker<ListResponse, Void>() {
            @Override
            protected ListResponse doInBackground() throws Exception {
                return client.executeListCommand();
            }

            @Override
            protected void done() {
                ListResponse listResponse = null;
                try {
                    listResponse = get();
                } catch (InterruptedException | ExecutionException ignored) {
                }

                if (listResponse == null) {
                    JOptionPane.showMessageDialog(null, "Error getting list of files");
                    return;
                }

                DefaultTableModel model = (DefaultTableModel) filesTable.getModel();
                model.setNumRows(0);

                for (int i = 0; i < listResponse.size(); i++) {
                    ListResponse.ListResponseItem item = listResponse.get(i);
                    model.addRow(new Object[]{item.name, item.id, item.size / 1024} );
                }
            }
        }.execute();
    }

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {
        new SwingWorker<UpdateResponse, Void>() {
            @Override
            protected UpdateResponse doInBackground() throws Exception {
                return client.executeUpdateCommand();
            }

            @Override
            protected void done() {
                UpdateResponse updateResponse = null;
                try {
                    updateResponse = get();
                } catch (InterruptedException | ExecutionException ignored) {
                    // ExecutionExceptions already logged by `client`
                }

                if (updateResponse != null && updateResponse.getStatus()) {
                    JOptionPane.showMessageDialog(null, "Updated!");
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to update :C");
                }
            }
        }.execute();
    }

    private void getSeedsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (filesTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Select file first!");
            return;
        }

        new SwingWorker<SourcesResponse, Void>() {
            private String fileName;

            @Override
            protected SourcesResponse doInBackground() throws Exception {
                int selectedRow = filesTable.getSelectedRow();
                // Use 1 to get File ID
                Integer id = (Integer) filesTable.getValueAt(selectedRow, 1);

                // Use 0 to get File Name
                fileName = (String) filesTable.getValueAt(selectedRow, 0);

                browsedFileId = id;
                return client.executeSourcesCommand(id.toString());
            }

            @Override
            protected void done() {
                SourcesResponse sourcesResponse = null;
                try {
                    sourcesResponse = get();
                } catch (InterruptedException | ExecutionException ignored) { }

                if (sourcesResponse == null) {
                    JOptionPane.showMessageDialog(null, "Failed to get seeds");
                    return;
                }

                DefaultTableModel model = (DefaultTableModel) seedsTable.getModel();
                model.setNumRows(0);
                for (int i = 0; i < sourcesResponse.size(); i++) {
                    SourcesResponse.Source source = sourcesResponse.get(i);
                    model.addRow(new Object[]{source.getHost(), source.getPort()});
                }
            }
        }.execute();
    }

    private void getPartsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (seedsTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Select seed first");
            return;
        }

        new SwingWorker<StatResponse, Void>() {
            @Override
            protected StatResponse doInBackground() throws Exception {
                int selectedRow = seedsTable.getSelectedRow();
                String address = (String) seedsTable.getValueAt(selectedRow, 0);
                Short port = (Short) seedsTable.getValueAt(selectedRow, 1);

                browsedPeerAddress = address;
                browsedPeerPort = port;

                return client.executeStatCommand(
                        address,
                        port.toString(),
                        Integer.toString(browsedFileId)
                );
            }

            @Override
            protected void done() {
                StatResponse statResponse = null;

                try {
                    statResponse = get();
                } catch (InterruptedException ignored) {
                } catch (ExecutionException e) {
                    if (e.getCause() != null) {
                        log.error(e.getCause().getMessage());
                    } else {
                        log.error(e.getMessage());
                    }
                }

                DefaultTableModel model = (DefaultTableModel) partsTable.getModel();
                model.setNumRows(0);

                if (statResponse == null) {
                    JOptionPane.showMessageDialog(null, "Error getting parts from seed");
                    return;
                }

                int[] parts = statResponse.getParts();
                for (int i = 0; i < parts.length; i++) {
                    model.addRow(new Object[]{ parts[i] });
                }
            }
        }.execute();
    }

    private void downloadPartButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (partsTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Select part to download first!");
            return;
        }

        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                int selectedRow = partsTable.getSelectedRow();
                DefaultTableModel model = (DefaultTableModel) partsTable.getModel();
                Integer partNumber = (Integer) model.getValueAt(selectedRow, 0);

                client.executeGetCommand(
                        browsedPeerAddress,
                        Short.toString(browsedPeerPort),
                        Integer.toString(browsedFileId),
                        partNumber.toString()
                        );
                return null;
            }

            @Override
            protected void done() {
                try {
                    get();
                } catch (InterruptedException ignored) {
                } catch (ExecutionException e) {
                    if (e.getCause() != null) {
                        log.error(e.getCause().getMessage());
                    } else {
                        log.error(e.getMessage());
                    }
                    JOptionPane.showMessageDialog(null, "Failed to download part");
                    return;
                }

                JOptionPane.showMessageDialog(null, "Downloaded successfully!");
            }
        }.execute();
    }

    public static void main(String args[]) {
        if (args.length < 1) {
            log.error("Error: client port should be provided");
            return;
        }

        short clientPort;
        try {
            clientPort = Short.parseShort(args[0]);
        } catch (NumberFormatException e) {
            log.error("Error: can't parse client port");
            return;
        }

        client = new Client(clientPort, System.getProperty("user.dir"), log);

        log.trace("Connecting to server");
        client.initClient();

        Path curDir = Paths.get(System.getProperty("user.dir'"));
        MainWindow mainWindow = new MainWindow(curDir);
        log.addObserver(mainWindow);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> mainWindow.setVisible(true));
    }

    // Variables declaration - do not modify
    private javax.swing.JButton downloadPartButton;
    private javax.swing.JTable filesTable;
    private javax.swing.JButton getPartsButton;
    private javax.swing.JButton getSeedsButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel logLabel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTable partsTable;
    private javax.swing.JLabel partsTableLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable seedsTable;
    private javax.swing.JLabel seedsTableLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton uploadButton;
    // End of variables declaration
}
